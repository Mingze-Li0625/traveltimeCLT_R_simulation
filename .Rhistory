#' \code{\link{get_timeBin_x_edges}} for edge statistics calculation
#' @export
sample_route <- function(tripID, trips, r=NULL,timeBin_x_edges=NULL, rho=0.31) {
if (!data.table::is.data.table(trips)) {
data.table::setDT(trips)
}
if(is.null(r)) r=length(tripID)
# Standardize column names
names(trips) <- tolower(names(trips))
setnames(trips,
old = c("linkid", "timebin"),
new = c("linkId", "timeBin"),
skip_absent = TRUE)
# Add time bins if not present
if(is.null(trips$timeBin)) trips$timeBin <- time_bins_readable(trips$time)
if(is.null(trips$time)) stop("trips do not have time!")
# Generate edge statistics if not provided
if(is.null(timeBin_x_edges)) timeBin_x_edges <- get_timeBin_x_edges(trips[!trip%in%tripID,])
# Extract real trip statistics
real_time <- as.numeric(trips[trip %in% tripID, .(difftime(time[.N],time[1],units="secs")), trip]$V1)
real_length <- trips[trip %in% tripID, .(sum(length)), trip]$V1
real_edge_count <- trips[trip %in% tripID, .(length(time)), trip]$V1
real_start_time <- trips[trip %in% tripID, .(time[1]), trip]$V1
# Generate simulated trips with random edge counts
simulated_edge_num <- trips[, .(trip = 1:r,
len = sample(real_edge_count, r, replace=TRUE))]
simulated_data <- simulated_edge_num[, .(trip = rep(trip, len)), by = trip]
# Assign random start times and time bins
simulated_start_time <- sample(real_start_time, r, replace=TRUE)
simulated_timeBin <- time_bins_readable(simulated_start_time)
simulated_data[,1] <- NULL
simulated_data <- simulated_data[, timeBin := simulated_timeBin[trip], trip]
# Sample link IDs based on frequency in each time bin
simulated_data <- simulated_data[, sampled_linkId := {
current_edges <- timeBin_x_edges[timeBin == .BY$timeBin]
sample(current_edges$linkId, size = .N, prob = current_edges$frequency, replace = TRUE)
}, by = timeBin]
# Merge with edge statistics to get mean, sd, and length
simulated_data <- merge(simulated_data, timeBin_x_edges,
by.x = c("sampled_linkId", "timeBin"),
by.y = c("linkId", "timeBin"),
all.x = TRUE)
# Generate simulated travel times using different correlation methods
dependent_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(dependent_uniform(.N, rho = rho))))), trip]$V1
independent_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(runif(.N))))), trip]$V1
first_order_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(first_order_uniform(.N, rho = rho))))), trip]$V1
second_order_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(second_order_uniform(.N, rho = rho))))), trip]$V1
# Calculate simulated route lengths
simulated_length <- simulated_data[, .(sum(length)), trip]$V1
# Create summary results data.frame
simulated_result <- data.frame(
real_time = real_time,
dependent_time = dependent_time,
independent_time = independent_time,
first_order_time = first_order_time,
second_order_time = second_order_time,
real_length = real_length,
simulated_length = simulated_length
)
# Create detailed link-level data data.frame with start times only in first row of each trip
simulated_data <- simulated_data[, .(
trip = simulated_data$trip,
linkId = simulated_data$sampled_linkId,
start_time =  simulated_start_time[trip],
length = simulated_data$length
)]
return(list(
simulated_result = simulated_result,
simulated_data = simulated_data
))
}
sample <- sample_route(id,trips,50,timeBin_x_edge)
View(sample[[2]])
sample <- sample_route(id,trips,900,timeBin_x_edge)
#'
#' # Run simulation for specific trips
#' sample_route(c(2700,2701,2702,2716,2726,2732,2738,2739,2744,2746,2747,2748,2755,2757,2769,2788,2790), trips)
#' @seealso \code{\link{OnDemand_simulator}} for similar simulation without route length,
#' \code{\link{dependent_uniform}} for correlated uniform random number generation,
#' \code{\link{first_order_uniform}} for first-order correlated uniform random number generation,
#' \code{\link{second_order_uniform}} for second-order correlated uniform random number generation,
#' \code{\link{time_bins_readable}} for time bin classification,
#' \code{\link{get_timeBin_x_edges}} for edge statistics calculation
#' @export
sample_route <- function(tripID, trips, r=NULL,timeBin_x_edges=NULL, rho=0.31) {
if (!data.table::is.data.table(trips)) {
data.table::setDT(trips)
}
if(is.null(r)) r=length(tripID)
# Standardize column names
names(trips) <- tolower(names(trips))
setnames(trips,
old = c("linkid", "timebin"),
new = c("linkId", "timeBin"),
skip_absent = TRUE)
# Add time bins if not present
if(is.null(trips$timeBin)) trips$timeBin <- time_bins_readable(trips$time)
if(is.null(trips$time)) stop("trips do not have time!")
# Generate edge statistics if not provided
if(is.null(timeBin_x_edges)) timeBin_x_edges <- get_timeBin_x_edges(trips[!trip%in%tripID,])
# Extract real trip statistics
real_time <- as.numeric(trips[trip %in% tripID, .(difftime(time[.N],time[1],units="secs")), trip]$V1)
real_length <- trips[trip %in% tripID, .(sum(length)), trip]$V1
real_edge_count <- trips[trip %in% tripID, .(length(time)), trip]$V1
real_start_time <- trips[trip %in% tripID, .(time[1]), trip]$V1
# Generate simulated trips with random edge counts
simulated_edge_num <- trips[, .(trip = 1:r,
len = sample(real_edge_count, r, replace=TRUE))]
simulated_data <- simulated_edge_num[, .(trip = rep(trip, len)), by = trip]
# Assign random start times and time bins
simulated_start_time <- sample(real_start_time, r, replace=TRUE)
simulated_timeBin <- time_bins_readable(simulated_start_time)
simulated_data[,1] <- NULL
simulated_data <- simulated_data[, timeBin := simulated_timeBin[trip], trip]
# Sample link IDs based on frequency in each time bin
simulated_data <- simulated_data[, sampled_linkId := {
current_edges <- timeBin_x_edges[timeBin == .BY$timeBin]
sample(current_edges$linkId, size = .N, prob = current_edges$frequency, replace = TRUE)
}, by = timeBin]
# Merge with edge statistics to get mean, sd, and length
simulated_data <- merge(simulated_data, timeBin_x_edges,
by.x = c("sampled_linkId", "timeBin"),
by.y = c("linkId", "timeBin"),
all.x = TRUE)
# Generate simulated travel times using different correlation methods
dependent_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(dependent_uniform(.N, rho = rho))))), trip]$V1
independent_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(runif(.N))))), trip]$V1
first_order_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(first_order_uniform(.N, rho = rho))))), trip]$V1
second_order_time <- simulated_data[, .(sum(exp(mean+sd*qnorm(second_order_uniform(.N, rho = rho))))), trip]$V1
# Calculate simulated route lengths
simulated_length <- simulated_data[, .(sum(length)), trip]$V1
# Create summary results data.frame
simulated_result <- data.frame(
dependent_time = dependent_time,
independent_time = independent_time,
first_order_time = first_order_time,
second_order_time = second_order_time,
simulated_length = simulated_length
)
real_result <- data.frame(
real_time = real_time,
real_length = real_length
)
# Create detailed link-level data data.frame with start times only in first row of each trip
simulated_data <- simulated_data[, .(
trip = simulated_data$trip,
linkId = simulated_data$sampled_linkId,
start_time =  simulated_start_time[trip],
length = simulated_data$length
)]
return(list(
simulated_result = simulated_result,
real_result = real_result,
simulated_data = simulated_data
))
}
sample <- sample_route(id,trips,90,timeBin_x_edge)
plot_CDF_compare(sample[[1]]$dependent_time,sample[[2]]$real_time,"frequency simulation")
sample <- sample_route(id,trips,1200,timeBin_x_edge)
plot_CDF_compare(sample[[1]]$dependent_time,sample[[2]]$real_time,"frequency simulation")
plot_CDF_compare(sample[[1]]$independent_time,sample[[2]]$real_time,"frequency simulation")
plot_CDF_compare(sample[[1]]$dependent_time,sample[[2]]$real_time,"frequency simulation")
knitr::opts_chunk$set(echo = TRUE)
#source('traveltimeCLTfunctions.R')
library(traveltimeCLT)
library(data.table)
trips <- fread('data/trips.csv')
id <- sample(unique(trips$trip),1000)
train = trips[!trips$trip %in% id,]
test =  trips[trips$trip %in% id,]
timeBin_x_edge <- get_timeBin_x_edges(train)
sample <- sample_route(id,trips,800,timeBin_x_edge)
plot_CDF_compare(sample[[1]]$dependent_time,sample[[2]]$real_time,"frequency simulation")
knitr::opts_chunk$set(echo = TRUE)
#source('traveltimeCLTfunctions.R')
library(traveltimeCLT)
library(data.table)
trips <- fread('data/trips.csv')
id <- sample(unique(trips$trip),1000)
train = trips[!trips$trip %in% id,]
test =  trips[trips$trip %in% id,]
timeBin_x_edge <- get_timeBin_x_edges(train)
sample <- sample_route(id,trips,1001,timeBin_x_edge)
plot_CDF_compare(sample[[1]]$dependent_time,sample[[2]]$real_time,"frequency simulation")
names(train)[c(2,3,5,7,8)]=c("tripID","entry_time","duration_secs","distance_meters","linkID")
train$speed=exp(train$logspeed)
train$timeBin=time_bins_readable(train$entry_time)
fit <- traveltimeCLT(train, lag = 1)
test = trips[trips$trip %in% id,]
names(test)[c(2,3,5,7,8)]=c("tripID","entry_time","1","distance_meters","linkID")
p=predict(fit, test)
fit2 <- traveltimeCLT(train, lag = 1, model = 'population')
p2=predict(fit2, test)
R1=request_R(p,start_times$start_time-300,start_times$start_time,sampled_length$real_length,1,risk_free=0)
start_times <- sampled_1000_trips[, .(start_time = time[1]), by = trip]
start_times <- test[, .(start_time = time[1]), by = trip]
start_times <- test[, .(start_time = time[1]), by = tripID]
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sampled_length$real_length,1,risk_free=0)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times-300,start_times,sampled_length$real_length,1,risk_free=0)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sampled_length$real_length,1,risk_free=0)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
all(R1==R2)
all(p==p2)
all(R1>0)
#all(R1==R2,na.rm = T)
#all(p==p2,na.rm = T)
#which(is.na(p$variance)==T)
plot(sampled_length$real_length,R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(sampled_price$real_price,R1,pch = 16,cex = 0.6)
plot_CDF_compare(sampled_length$real_length,sampled_length$simulation,"global edge number simulation","total length","CDF of length",60000)
plot_CDF_compare(sample[[2]]$real_length,sample[[1]]$simulated_length,"global edge number simulation","total length","CDF of length",60000)
sampled_price<-data.table(trip=simulated_result$trip,real_price=price(sampled_time$real_time,sampled_length$real_length)[,1],simulated_price=price(sampled_time$simulation,sampled_length$simulation)[,1])
sampled_price<-data.table(real_price=price(sample[[2]]$real_time,sample[[2]]$real_length)[,1],simulated_price=price(sampled_time$simulation,sampled_length$simulation)[,1])
sampled_price<-data.table(real_price=price(sample[[2]]$real_time,sample[[2]]$real_length)[,1],simulated_price=price(sample[[1]]$dependent_time,sample[[1]]$simulated_length)[,1])
plot_CDF_compare(sampled_price$real_price,sampled_price$simulated_price," simulated price","price","CDF of price",100)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(sampled_price$real_price,R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(sampled_price$real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sampled_time$real_time,R1,xlim = c(0, 8000),pch = 16,cex = 0.6)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(sampled_price$real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 8000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 8000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sampled_time$real_time,p$ETA,"CLT model expectation")
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(sampled_price$real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 8000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 8000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,p$ETA,"CLT model expectation")
plot(density(na.omit(R1)))
knitr::opts_chunk$set(echo = TRUE)
#source('traveltimeCLTfunctions.R')
library(traveltimeCLT)
library(data.table)
trips <- fread('data/trips.csv')
id <- sample(unique(trips$trip),1000)
train = trips[!trips$trip %in% id,]
test =  trips[trips$trip %in% id,]
timeBin_x_edge <- get_timeBin_x_edges(train)
#sample_route(id,trips,1001)
sample <- sample_route(id,trips,1001,timeBin_x_edge)
pressure_test <- sample_route(id,trips,1001,timeBin_x_edge,abuse_ratio = 0.1,abuse_multiplier = 5)
plot_CDF_compare(sample[[2]]$real_time,sample[[1]]$dependent_time,"frequency simulation")
plot_CDF_compare(sample[[2]]$real_length,sample[[1]]$simulated_length,"global edge number simulation","total length","CDF of length",60000)
real_price=price(sample[[2]]$real_time,sample[[2]]$real_length)[,1]
simulated_price<-data.table(simulated_price=price(sample[[1]]$dependent_time,sample[[1]]$simulated_length)[,1],pressured_price=price(pressure_test[[1]]$dependent_time,pressure_test[[1]]$simulated_length)[,1])
plot_CDF_compare(real_price,simulated_price$simulated_price," simulated price","price","CDF of price",100)
names(train)[c(2,3,5,7,8)]=c("tripID","entry_time","duration_secs","distance_meters","linkID")
train$speed=exp(train$logspeed)
train$timeBin=time_bins_readable(train$entry_time)
fit <- traveltimeCLT(train)
test = trips[trips$trip %in% id,]
names(test)[c(2,3,5,7,8)]=c("tripID","entry_time","1","distance_meters","linkID")
p=predict(fit, test)
fit2 <- traveltimeCLT(train, model = 'population')
p2=predict(fit2, test)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
all(R1==R2)
all(p==p2)
all(R1>0)
#all(R1==R2,na.rm = T)
#all(p==p2,na.rm = T)
#which(is.na(p$variance)==T)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,p$ETA,"CLT model expectation")
plot(density(na.omit(R1)))
plot(simulated_price$simulated_price,simulated_price$pressured_price,pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,R1,pch = 16,cex = 0.6)
View(test)
p=predict(fit, pressure_test[[3]])
names(pressure_test[[3]])=c("tripID","linkID","","entry_time","distance_meters")
p=predict(fit, pressure_test[[3]])
names(pressure_test[[3]])=c("tripID","linkID","","entry_time","distance_meters")
names(pressure_test[[3]])=c("tripID","linkID","entry_time","distance_meters")
p=predict(fit, pressure_test[[3]])
pressure_p=predict(fit,pressure_test[[3]])
pressure_p=predict(fit,pressure_test[[3]])
pressure_p2=predict(fit2,pressure_test[[3]])
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p1,start_times$start_time-300,start_times$start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
pressure_R1=request_R(pressure_p,start_times$start_time-300,start_times$start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_test[[3]]$entry_time-300,pressure_test[[3]]$entry_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
pressure_R2=request_R(pressure_p2,pressure_test[[3]]$entry_time-300,pressure_test[[3]]$entry_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
all(R1==R2)
all(p==p2)
View(pressure_p2)
pressure_test[[3]]$entry_time
View(pressure_test[[3]])
pressure_start_time <- pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID]
View(pressure_start_time)
pressure_start_time <- pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2]
View(pressure_start_time)
pressure_start_time <- pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID]
View(pressure_start_time)
View(pressure_p)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
View(pressure_start_time)
pressure_start_time
pressure_start_time[1]
as.POSIXct(pressure_start_time)
pressure_start_time <- as.vector(pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
View(pressure_start_time)
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
View(pressure_start_time)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
pressure_start_time <- unlist(pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time
pressure_start_time[1]
as.POSIXct(pressure_start_time[1])
pressure_start_time <- as.character(pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- as.character(pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
pressure_start_time
pressure_start_time[1]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time
as.POSIXct(pressure_start_time)
as.POSIXct(pressure_start_time[,1])
# 提取列并转换
start_times <- as.POSIXct(pressure_start_time$start_time, format = "%Y-%m-%d %H:%M:%S")
# 或直接更新原数据列
pressure_start_time[, start_time := as.POSIXct(start_time, format = "%Y-%m-%d %H:%M:%S")]
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time[, start_time := as.POSIXct(start_time, format = "%Y-%m-%d %H:%M:%S")]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time[, start_time := as.POSIXct(start_time, format = "%Y-%m-%d %H:%M:%S")]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
start_time_vector <- pressure_start_time[["start_time"]]
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time <-pressure_start_time[["start_time"]]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
pressure_R2=request_R(pressure_p2,pressure_start_time-300,pressure_start_time,pressure_test[[3]]$distance_meters,1,risk_free=0)
all(R1==R2)
all(p==p2)
View(pressure_test)
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time <-pressure_start_time[["start_time"]]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[1]]$simulated_length,1,risk_free=0)
pressure_R2=request_R(pressure_p2,pressure_start_time-300,pressure_start_time,pressure_test[[1]]$simulated_length,1,risk_free=0)
all(R1==R2)
all(p==p2)
names(train)[c(2,3,5,7,8)]=c("tripID","entry_time","duration_secs","distance_meters","linkID")
train$speed=exp(train$logspeed)
train$timeBin=time_bins_readable(train$entry_time)
fit <- traveltimeCLT(train)
test = trips[trips$trip %in% id,]
names(test)[c(2,3,5,7,8)]=c("tripID","entry_time","1","distance_meters","linkID")
names(pressure_test[[3]])=c("tripID","linkID","entry_time","distance_meters")
p=predict(fit, test)
pressure_p=predict(fit,pressure_test[[3]])
fit2 <- traveltimeCLT(train, model = 'population')
p2=predict(fit2, test)
pressure_p2=predict(fit2,pressure_test[[3]])
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time <-pressure_start_time[["start_time"]]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[1]]$simulated_length,1,risk_free=0)
pressure_R2=request_R(pressure_p2,pressure_start_time-300,pressure_start_time,pressure_test[[1]]$simulated_length,1,risk_free=0)
all(R1==R2)
all(p==p2)
all(R1>0)
#all(R1==R2,na.rm = T)
#all(p==p2,na.rm = T)
#which(is.na(p$variance)==T)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,p$ETA,"CLT model expectation")
plot(density(na.omit(R1)))
plot(simulated_price$simulated_price,simulated_price$pressured_price,pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,p$ETA,"CLT model expectation")
plot(density(na.omit(R1)))
plot(simulated_price$simulated_price,simulated_price$pressured_price,pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1[1:1000],pch = 16,cex = 0.6)
plot(real_price[1:1000],pressure_R1[1:1000],pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1[1:1000],xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_p$ETA,pressure_R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_R1,pressure_R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,pressure_p$ETA,"CLT model expectation")
?plot_CDF_compare
plot_CDF_compare(sample[[2]]$real_time,pressure_p$ETA,x_max = 10000,"CLT model expectation")
plot_CDF_compare(sample[[2]]$real_time,pressure_p$ETA,x_max = 15000,"CLT model expectation")
plot(density(na.omit(pressure_R1)))
plot(simulated_price$simulated_price,simulated_price$pressured_price,pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1[1:1000],pch = 16,cex = 0.6)
plot(real_price[1:1000],pressure_R1[1:1000],pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1[1:1000],xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_p$ETA,pressure_R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_R1,pressure_R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,pressure_p$ETA,x_max = 15000,"CLT model expectation")
plot(density(na.omit(pressure_R1)))
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,p$ETA,"CLT model expectation")
plot(density(na.omit(R1)))
knitr::opts_chunk$set(echo = TRUE)
#source('traveltimeCLTfunctions.R')
library(traveltimeCLT)
library(data.table)
trips <- fread('data/trips.csv')
id <- sample(unique(trips$trip),1000)
train = trips[!trips$trip %in% id,]
test =  trips[trips$trip %in% id,]
timeBin_x_edge <- get_timeBin_x_edges(train)
#sample_route(id,trips,1001)
sample <- sample_route(id,trips,1001,timeBin_x_edge)
pressure_test <- sample_route(id,trips,1001,timeBin_x_edge,abuse_ratio = 0.1,abuse_multiplier = 5)
plot_CDF_compare(sample[[2]]$real_time,sample[[1]]$dependent_time,"frequency simulation")
plot_CDF_compare(sample[[2]]$real_length,sample[[1]]$simulated_length,"global edge number simulation","total length","CDF of length",60000)
real_price=price(sample[[2]]$real_time,sample[[2]]$real_length)[,1]
simulated_price<-data.table(simulated_price=price(sample[[1]]$dependent_time,sample[[1]]$simulated_length)[,1],pressured_price=price(pressure_test[[1]]$dependent_time,pressure_test[[1]]$simulated_length)[,1])
plot_CDF_compare(real_price,simulated_price$simulated_price," simulated price","price","CDF of price",100)
names(train)[c(2,3,5,7,8)]=c("tripID","entry_time","duration_secs","distance_meters","linkID")
train$speed=exp(train$logspeed)
train$timeBin=time_bins_readable(train$entry_time)
fit <- traveltimeCLT(train)
test = trips[trips$trip %in% id,]
names(test)[c(2,3,5,7,8)]=c("tripID","entry_time","1","distance_meters","linkID")
names(pressure_test[[3]])=c("tripID","linkID","entry_time","distance_meters")
p=predict(fit, test)
pressure_p=predict(fit,pressure_test[[3]])
fit2 <- traveltimeCLT(train, model = 'population')
p2=predict(fit2, test)
pressure_p2=predict(fit2,pressure_test[[3]])
start_times <- test[, .(start_time = entry_time[1]), by = tripID]
pressure_start_time <- (pressure_test[[3]][, .(start_time = entry_time[1]), by = tripID][,2])
pressure_start_time <-pressure_start_time[["start_time"]]
R1=request_R(p,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
R2=request_R(p2,start_times$start_time-300,start_times$start_time,sample[[2]]$real_length,1,risk_free=0)
pressure_R1=request_R(pressure_p,pressure_start_time-300,pressure_start_time,pressure_test[[1]]$simulated_length,1,risk_free=0)
pressure_R2=request_R(pressure_p2,pressure_start_time-300,pressure_start_time,pressure_test[[1]]$simulated_length,1,risk_free=0)
all(R1==R2)
all(p==p2)
all(R1>0)
#all(R1==R2,na.rm = T)
#all(p==p2,na.rm = T)
#which(is.na(p$variance)==T)
plot(sample[[2]]$real_length,R1,pch = 16,cex = 0.6)
plot(real_price[1:1000],R1,pch = 16,cex = 0.6)
plot(sample[[2]]$real_time,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(p$ETA,R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(R1,R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,p$ETA,"CLT model expectation")
plot(density(na.omit(R1)))
plot(simulated_price$simulated_price,simulated_price$pressured_price,pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1[1:1000],pch = 16,cex = 0.6)
plot(real_price[1:1000],pressure_R1[1:1000],pch = 16,cex = 0.6)
plot(pressure_test[[2]]$real_length,pressure_R1[1:1000],xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_p$ETA,pressure_R1,xlim = c(0, 6000),pch = 16,cex = 0.6)
plot(pressure_R1,pressure_R2,pch = 16,cex = 0.6)
plot_CDF_compare(sample[[2]]$real_time,pressure_p$ETA,x_max = 15000,"CLT model expectation")
plot(density(na.omit(pressure_R1)))
